'use client';

import apiClient from "@/lib/apiClient";
import { ApiResponse, PaginatedResponse } from "@/types/api-response";
import { CourseDetailsResponse, CourseDto, CourseRequest, CourseSearchRequest, CourseStatusCountDto, CourseStatusRequest} from "@/types/course";
import { CourseData, CourseLevel, CourseStatus } from "@/types/new-course";
import { AxiosResponse } from "axios";
import { UserDto } from "@/types/course";
import { uploadImage } from "./imageService";
import { CourseInstructorDto, CourseInstructorDtoRequest } from "@/types/instructor-course";

// üìå GET /courses/pagination
export async function getCoursesPaginated(
    page = 0,
    size = 5,
    sortBy = 'name',
    sortDirection: 'asc' | 'desc' = 'asc',
    categorySlug?: string,
    minRating = 0
): Promise<PaginatedResponse<CourseDto> | null> {
    try {
        const response: AxiosResponse = await apiClient.get('/courses/pagination', {
            params: {
                page,
                size,
                sortBy,
                sortDirection,
                categorySlug,
                minRating
            }
        });
        return response.data.data;
    } catch (error) {
        console.error("getCoursesPaginated error:", error);
        return null;
    }
}

// üîç GET /courses/{slug} - Get course by slug
export async function getCourseBySlug(slug: string): Promise<CourseDetailsResponse | null> {
    try {
        const response: AxiosResponse = await apiClient.get(`/courses/${slug}`);
        return response.data.data;
    } catch (error) {
        console.error(`getCourseBySlug error for slug ${slug}:`, error);
        return null;
    }
}

export async function existCourseBySlug(slug: string): Promise<Boolean> {
    try {
        const response: AxiosResponse = await apiClient.get(`/courses/check/${slug}`);
        if (response.status === 200) {
            console.log(`Course with slug ${slug} data=` + response.data.data);
            return response.data.data;
        }
    } catch (error) {
        console.error(`getCourseBySlug error for slug ${slug}:`, error);
        return false;
    } finally {
    }
    return false;
}

// üîç GET /courses/search
export async function searchCourses(
    search: CourseSearchRequest,
    page = 0,
    size = 10,
    sortBy = 'name',
    sortDirection: 'asc' | 'desc' = 'asc'
): Promise<PaginatedResponse<CourseDto> | null> {
    try {
        const response: AxiosResponse = await apiClient.get('/courses/search', {
            params: {
                ...search,
                page,
                size,
                sortBy,
                sortDirection
            }
        });
        return response.data.data;
    } catch (error) {
        console.error("searchCourses error:", error);
        return null;
    }
}

export async function searchCoursesDetail(
    search: CourseSearchRequest,
    page = 0,
    size = 10,
    sortBy = 'name',
    sortDirection: 'asc' | 'desc' = 'asc'
): Promise<PaginatedResponse<CourseDetailsResponse> | null> {
    try {
        const response: AxiosResponse = await apiClient.get('/courses/searchdetails', {
            params: {
                ...search,
                page,
                size,
                sortBy,
                sortDirection
            }
        });
        return response.data.data;
    } catch (error) {
        console.error("searchCoursesDetail error:", error);
        return null;
    }
}

// ‚ûï POST /courses
export async function createCourse(course: CourseRequest): Promise<CourseDto | null> {
    try {
        const response: AxiosResponse = await apiClient.post('/courses', course);
        return response.data.data;
    } catch (error) {
        console.error("createCourse error:", error);
        return null;
    }
}

// üìù PUT /courses/crud/{slug}
export async function updateCourse(slug: string, course: CourseRequest): Promise<CourseDto | null> {
    try {
        const response: AxiosResponse = await apiClient.put(`/courses/crud/${slug}`, course);
        return response.data.data;
    } catch (error) {
        console.error("updateCourse error:", error);
        return null;
    }
}

// ‚ùå DELETE /courses/crud/{slug}
export async function deleteCourse(slug: string): Promise<boolean> {
    try {
        await apiClient.delete(`/courses/crud/${slug}`);
        return true;
    } catch (error) {
        console.error("deleteCourse error:", error);
        return false;
    }
}


export const getCourseLearning = async (slug: string): Promise<CourseDto | null> => {
    try {
        const response: AxiosResponse<ApiResponse<CourseDto>> = await apiClient.get(
            `/courses/${slug}/learning`
        );
        return response.data.data;
    } catch (error) {
        console.error("getCourseLearning error:", error);
        return null;
    }
}

/**
 * L·∫•y th√¥ng tin v·ªÅ kh√≥a h·ªçc b·∫±ng ID
 * @param id ID c·ªßa kh√≥a h·ªçc
 * @returns Th√¥ng tin chi ti·∫øt c·ªßa kh√≥a h·ªçc
 */
export const getCourseById = async (id: string): Promise<CourseDto | null> => {
    try {
        const response: AxiosResponse = await apiClient.get(`/courses/id/${id}`);
        return response.data.data;
    } catch (error) {
        console.error(`Error fetching course by ID ${id}:`, error);
        return null;
    }
};

/**
 * L·∫•y slug c·ªßa kh√≥a h·ªçc t·ª´ ID kh√≥a h·ªçc
 * @param id ID c·ªßa kh√≥a h·ªçc c·∫ßn l·∫•y slug
 * @returns Slug c·ªßa kh√≥a h·ªçc
 */
export const getCourseSlugById = async (id: string): Promise<string | null> => {
    try {
        const response: AxiosResponse = await apiClient.get(`/courses/slug/${id}`);
        return response.data.data.slug;
    } catch (error) {
        console.error(`Error fetching course slug for ID ${id}:`, error);
        return null;
    }
};


/**
 * Giao di·ªán m·ªü r·ªông t·ª´ CourseDto ƒë·ªÉ bao g·ªìm th√¥ng tin instructor
 * S·ª≠ d·ª•ng cho c√°c t√≠nh nƒÉng c·∫ßn th√¥ng tin instructor m√† kh√¥ng mu·ªën l·∫•y to√†n b·ªô CourseDetailsResponse
 */
export interface CourseWithInstructorDto extends CourseDto {
    instructorName?: string;
    instructorId?: string;
    instructorAvatar?: string;
}

/**
 * L·∫•y th√¥ng tin kh√≥a h·ªçc k√®m th√¥ng tin gi·∫£ng vi√™n
 * @param courseId ID c·ªßa kh√≥a h·ªçc
 * @returns Th√¥ng tin kh√≥a h·ªçc k√®m theo th√¥ng tin gi·∫£ng vi√™n
 */
export const getCourseWithInstructor = async (courseId: string): Promise<CourseWithInstructorDto | null> => {
    try {
        // Tr∆∞·ªõc ti√™n, l·∫•y th√¥ng tin c∆° b·∫£n c·ªßa kh√≥a h·ªçc
        const courseBasicInfo = await getCourseById(courseId);
        if (!courseBasicInfo) {
            return null;
        }

        // Sau ƒë√≥, l·∫•y th√¥ng tin chi ti·∫øt (c√≥ instructor) b·∫±ng slug
        // ƒêi·ªÅu n√†y hi·ªáu qu·∫£ h∆°n v√¨ ch√∫ng ta ƒë√£ bi·∫øt slug t·ª´ th√¥ng tin c∆° b·∫£n
        const courseDetailInfo = await getCourseBySlug(courseBasicInfo.slug);

        if (courseDetailInfo) {
            // K·∫øt h·ª£p th√¥ng tin t·ª´ c·∫£ hai ngu·ªìn
            return {
                ...courseBasicInfo,
                instructorName: courseDetailInfo.ownerInstructor?.fullName,
                instructorId: courseDetailInfo.ownerInstructor?.id,
                instructorAvatar: courseDetailInfo.ownerInstructor?.avatarUrl
            };
        }

        // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin chi ti·∫øt, th·ª≠ g·ªçi API ri√™ng
        const response: AxiosResponse<ApiResponse<UserDto[]>> = await apiClient.get(`/courses/${courseId}/instructors`);
        const instructors = response.data.data;

        if (instructors && instructors.length > 0) {
            return {
                ...courseBasicInfo,
                instructorName: instructors[0].fullName,
                instructorId: instructors[0].id,
                instructorAvatar: instructors[0].avatarUrl
            };
        }

        // N·∫øu kh√¥ng c√≥ th√¥ng tin instructor, tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n
        return courseBasicInfo;
    } catch (error) {
        console.error(`Error fetching course with instructor for ID ${courseId}:`, error);
        return null;
    }
};

/**
 * L·∫•y danh s√°ch gi·∫£ng vi√™n c·ªßa m·ªôt kh√≥a h·ªçc
 * @param courseId ID c·ªßa kh√≥a h·ªçc
 * @returns Danh s√°ch c√°c gi·∫£ng vi√™n c·ªßa kh√≥a h·ªçc
 */
export const getCourseInstructors = async (courseId: string): Promise<UserDto[] | null> => {
    try {
        const response: AxiosResponse<ApiResponse<UserDto[]>> = await apiClient.get(`/courses/${courseId}/instructors`);
        return response.data.data;
    } catch (error) {
        console.error(`Error fetching instructors for course ID ${courseId}:`, error);
        return null;
    }
};

export const uploadImageAndCreateCourse = async (courseData: CourseData): Promise<CourseDto | null> => {
    // Upload image first
    if (!courseData.thumbnail) {
        //   toast({
        //     title: 'L·ªói',
        //     description: 'Vui l√≤ng ch·ªçn h√¨nh ·∫£nh thumbnail cho kh√≥a h·ªçc',
        //     variant: 'destructive',
        //   });
        return null;
    }

    const uploadedImage = await uploadImage(courseData.thumbnail);

    if (!uploadedImage) {

        return null;
    }
    // Prepare course request with the uploaded image
    const courseRequest: CourseRequest = {
        name: courseData.title,
        description: courseData.description,
        slug: courseData.slug || courseData.slug,
        price: courseData.price,
        level: courseData.level as CourseLevel,
        language: courseData.language,
        categoryId: Number(courseData.category), // Convert string to number if needed
        image: uploadedImage.id, // Use the image ID from the upload response
        status: CourseStatus.DRAFT, // Set initial status as DRAFT
    };

    // Create the course
    const createdCourse = await createCourse(courseRequest);

    if (!createdCourse) {

        return null;
    }

    return createdCourse;
}


/**
 * L·∫•y ID kh√≥a h·ªçc t·ª´ slug
 * @param slug Slug c·ªßa kh√≥a h·ªçc
 * @returns ID c·ªßa kh√≥a h·ªçc ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
export const getCourseIdBySlug = async (slug: string): Promise<string | null> => {
    try {
        const response = await apiClient.get(`/courses/id-by-slug/${slug}`);
        if (response.data && response.data.data && response.data.data.id) {
            return response.data.data.id;
        }
        return null;
    } catch (error) {
        console.error('Error getting course ID by slug:', error);
        return null;
    }
};

// Th√™m v√†o courseService.ts

/**
 * L·∫•y danh s√°ch kh√≥a h·ªçc c·ªßa gi·∫£ng vi√™n ƒëƒÉng nh·∫≠p
 * @param page S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 0)
 * @param size S·ªë l∆∞·ª£ng b·∫£n ghi m·ªói trang
 * @param sortBy Tr∆∞·ªùng ƒë·ªÉ s·∫Øp x·∫øp
 * @param sortDirection H∆∞·ªõng s·∫Øp x·∫øp (asc/desc)
 * @returns Danh s√°ch kh√≥a h·ªçc c·ªßa gi·∫£ng vi√™n theo trang
 */
export async function getInstructorCourses(
    page = 0,
    size = 10,
    sortBy = 'createdDate',
    sortDirection: 'asc' | 'desc' = 'desc'
): Promise<PaginatedResponse<CourseDto> | null> {
    try {
        const response: AxiosResponse = await apiClient.get('/courses/instructor/courses', {
            params: {
                page,
                size,
                sortBy,
                sortDirection
            }
        });
        return response.data.data;
    } catch (error) {
        console.error("getInstructorCourses error:", error);
        return null;
    }
}

export async function createInstructorCourse(course: CourseInstructorDtoRequest): Promise<CourseInstructorDto | null> {
    try {
        const response: AxiosResponse = await apiClient.post('/courseinstructor', course);
        return response.data.data;
    } catch (error) {
        console.error("createCourseInstructor error:", error);
        return null;
    }
}

export async function getStatusCourse(): Promise<CourseStatusCountDto | null> {
    try {
        const response: AxiosResponse = await apiClient.get('/courses/statuscount');
        console.log("getCountStatus of course complete:", response.data.data);
        return response.data.data;
    } catch (error) {
        console.error("getCountStatus of course error:", error);
        return null;
    }
}

export async function updateStatusCourse(statusRequest : CourseStatusRequest): Promise<Boolean | null> {
    try {
        const response: AxiosResponse = await apiClient.put('/courses/statuschange', statusRequest);
        console.log("update course Status of course complete:", response.data.data);
        return response.data.data;
    } catch (error) {
        console.error("update course Status of course error:", error);
        return null;
    }
}